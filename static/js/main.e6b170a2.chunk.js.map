{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","subscribeTimer","useState","timerStart","setTimerStart","time","setTime","hoursDom","useRef","minutesDom","secundsDom","source","interval","timeMemory","subscribeFunc","subscribe","val","timeSum","hours","minutes","secunds","Math","trunc","current","innerHTML","useEffect","redyToDoubleClick","className","ref","type","onClick","unsubscribe","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OA+GeA,MA3Gf,WAAgB,IAQVC,EARS,EACuBC,oBAAS,GADhC,mBACNC,EADM,KACMC,EADN,OAEWF,mBAAS,GAFpB,mBAENG,EAFM,KAEAC,EAFA,KAGPC,EAAWC,iBAAO,MAClBC,EAAaD,iBAAO,MACpBE,EAAaF,iBAAO,MAEpBG,EAASC,YAAS,KAEpBC,EAAa,EAEXC,EAAgB,WACpBb,EAAiBU,EAAOI,WAAU,SAAAC,GAChC,IAAIC,EAAU,EACVC,EAAQ,EACRC,EAAU,EACVC,EAAU,EAEd,GAAIJ,EAAM,KAAO,EAAG,CAOlB,IANAC,GAAYD,EAAM,GAAMX,EACxBa,EAAQG,KAAKC,MAAML,EAAU,MAC7BE,EAAUE,KAAKC,MAAML,EAAU,IAC/BG,EAAUH,EACVJ,EAAaI,EAENE,GAAW,IAChBA,GAAW,GAGb,KAAOC,GAAW,IAChBA,GAAW,GAGTV,IAAYA,EAAWa,QAAQC,UAAYJ,EAAU,GAAV,WAAmBA,GAAYA,GAC1EX,IAAYA,EAAWc,QAAQC,UAAYL,EAAU,GAAV,WAAmBA,EAAnB,KAAgCA,EAAU,KACrFZ,IAAUA,EAASgB,QAAQC,UAAYN,EAAQ,GAAR,WAAiBA,EAAjB,KAA4BA,EAAQ,UAKrFO,qBAAU,WACJtB,GAAYW,OAGlB,IAmBIY,GAAoB,EAmBxB,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAU,QAAf,UACE,sBAAKA,UAAU,UAAf,UACE,mBAAGA,UAAU,OAAOC,IAAKrB,EAAzB,iBACA,mBAAGoB,UAAU,OAAOC,IAAKnB,EAAzB,iBACA,mBAAGkB,UAAU,OAAOC,IAAKlB,EAAzB,mBAGF,sBAAKiB,UAAU,iBAAf,UACE,wBAAQE,KAAK,SAASF,UAAU,QAAQG,QAhDjB,WACzB7B,GAAgBA,EAAe8B,cAE/B5B,IACFG,EAAQ,GACRI,EAAWa,QAAQC,UAAY,KAC/Bf,EAAWc,QAAQC,UAAY,MAC/BjB,EAASgB,QAAQC,UAAY,OAG/BpB,GAAeD,IAsCT,SACGA,EAAa,OAAS,UAEzB,wBAAQ0B,KAAK,SAASF,UAAU,OAAOG,QAtC5B,WACb7B,GAAgBA,EAAe8B,cAC/B9B,GAAkBI,GAAMC,EAAQ,GAC/BD,GAAMS,KAmCL,mBAGA,wBAAQe,KAAK,SAASF,UAAU,OAAOG,QAjC7B,WAChB,IAAKJ,EAOH,OANAA,GAAoB,OAEpBM,YAAW,WACTN,GAAoB,IACnB,KAKDzB,GAAgBA,EAAe8B,cAE/B5B,GAAYG,EAAQO,GACxBT,GAAc,IAmBR,2BC1FK6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e6b170a2.chunk.js","sourcesContent":["import './App.css';\nimport { useRef, useState, useEffect } from 'react';\nimport { interval } from 'rxjs';\n\nfunction App() {\n  const [timerStart, setTimerStart] = useState(false);\n  const [time, setTime] = useState(0);\n  const hoursDom = useRef(null);\n  const minutesDom = useRef(null);\n  const secundsDom = useRef(null);\n\n  const source = interval(100);\n  let subscribeTimer;\n  let timeMemory = 0;\n\n  const subscribeFunc = () => {\n    subscribeTimer = source.subscribe(val => {\n      let timeSum = 0;\n      let hours = 0;\n      let minutes = 0;\n      let secunds = 0;\n\n      if (val % 10 === 0) {\n        timeSum += (val / 10) + time;\n        hours = Math.trunc(timeSum / 3600);\n        minutes = Math.trunc(timeSum / 60);\n        secunds = timeSum;\n        timeMemory = timeSum;\n\n        while (minutes >= 60) {\n          minutes -= 60;\n        }\n\n        while (secunds >= 60) {\n          secunds -= 60;\n        }\n\n        if (secundsDom) secundsDom.current.innerHTML = secunds < 10 ? `0${secunds}` : secunds;\n        if (minutesDom) minutesDom.current.innerHTML = minutes < 10 ? `0${minutes}:` : minutes + \":\";\n        if (hoursDom) hoursDom.current.innerHTML = hours < 10 ? `0${hours}:` : hours + \":\";\n      }\n    })\n  }\n\n  useEffect(() => {\n    if (timerStart) subscribeFunc();\n  })\n\n  const startStopButtonClicked = () => {\n    if (subscribeTimer) subscribeTimer.unsubscribe();\n\n    if (timerStart) {\n      setTime(0);\n      secundsDom.current.innerHTML = \"00\";\n      minutesDom.current.innerHTML = \"00:\";\n      hoursDom.current.innerHTML = \"00:\";\n    }\n\n    setTimerStart(!timerStart);\n  }\n\n  const resetClick = () => {\n    if (subscribeTimer) subscribeTimer.unsubscribe();\n    if (subscribeTimer && time) setTime(0);\n    if (!time) subscribeFunc();\n  }\n\n  let redyToDoubleClick = false;\n\n  const waitClick = () => {\n    if (!redyToDoubleClick) {\n      redyToDoubleClick = true;\n\n      setTimeout(() => {\n        redyToDoubleClick = false;\n      }, 300);\n\n      return;\n    }\n\n    if (subscribeTimer) subscribeTimer.unsubscribe();\n\n    if (timerStart) setTime(timeMemory);\n    setTimerStart(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"timer\">\n        <div className=\"display\">\n          <p className=\"time\" ref={hoursDom}>00:</p>\n          <p className=\"time\" ref={minutesDom}>00:</p>\n          <p className=\"time\" ref={secundsDom}>00</p>\n        </div>\n\n        <div className=\"buttonsWrapper\">\n          <button type=\"button\" className=\"start\" onClick={startStopButtonClicked}>\n            {timerStart ? \"Stop\" : \"Start\"}\n          </button>\n          <button type=\"button\" className=\"wait\" onClick={resetClick}>\n            Reset\n          </button>\n          <button type=\"button\" className=\"wait\" onClick={waitClick}>\n            Wait\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}